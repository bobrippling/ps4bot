#!/usr/bin/env python

from slackclient import SlackClient
import signal
import sys
import config
from LunchBot import LunchBot
from DumpBot import DumpBot
from DoodleBot import DoodleBot
from SwiftBot import SwiftBot
from LogBot import LogBot
from ShutupBot import ShutupBot
from SportBot import SportBot
from MemeBot import MemeBot
from PS4Bot import PS4Bot
from SlackMonitor import SlackMonitor

def usage():
    print >>sys.stderr, "Usage: {} channel(s...) -- bot(s...)".format(sys.argv[0])
    sys.exit(1)

if len(sys.argv) < 4:
    usage()
try:
    sep = sys.argv.index("--")
except ValueError:
    usage()

# bot constants
BOT_TOKEN = config.slack_token
bot_names_to_classes = {
        "lunchbot": LunchBot,
        "dumpbot": DumpBot,
        "doodlebot": DoodleBot,
        "swiftbot": SwiftBot,
        "logbot": LogBot,
        "shutupbot": ShutupBot,
        "sportbot": SportBot,
        "memebot": MemeBot,
        "ps4bot": PS4Bot,
}

# global slack connection
slackconnection = SlackClient(BOT_TOKEN)

# setup channel monitoring
slackmonitor = SlackMonitor(slackconnection)

for bot_name in sys.argv[sep + 1:]:
    try:
        bot_ctor = bot_names_to_classes[bot_name]
    except KeyError:
        print >>sys.stderr, "bot \"{}\" doesn't exist".format(bot_name)
        sys.exit(1)

    bot_obj = bot_ctor(slackconnection, bot_name)
    for channel in sys.argv[1:sep]:
        slackmonitor.add_handler_for_channel(bot_obj, channel)

# catch SIGINT, cleanup before exit
def interrupt_handler(signal, frame):
    global slackmonitor
    slackmonitor.teardown()
    sys.exit(2)
signal.signal(signal.SIGINT, interrupt_handler)

# and begin
print "connected, watching..."
slackmonitor.run()
